{"version":3,"file":"react-toastify.esm.mjs","sources":["../src/utils/propValidator.ts","../src/utils/collapseToast.ts","../src/utils/cssTransition.tsx","../src/utils/mapper.ts","../src/core/eventManager.ts","../src/components/Icons.tsx","../src/hooks/useToastContainer.ts","../src/hooks/useToast.ts","../src/components/CloseButton.tsx","../src/components/ProgressBar.tsx","../src/components/Toast.tsx","../src/components/Transitions.tsx","../src/components/ToastContainer.tsx","../src/core/toast.ts","../src/utils/constant.ts"],"sourcesContent":["import { isValidElement } from 'react';\n\nexport const isNum = (v: any): v is Number =>\n  typeof v === 'number' && !isNaN(v);\n\nexport const isStr = (v: any): v is String => typeof v === 'string';\n\nexport const isFn = (v: any): v is Function => typeof v === 'function';\n\nexport const parseClassName = (v: any) => (isStr(v) || isFn(v) ? v : null);\n\nexport const getAutoCloseDelay = (\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) =>\n  toastAutoClose === false || (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n\nexport const canBeRendered = <T>(content: T): boolean =>\n  isValidElement(content) || isStr(content) || isFn(content) || isNum(content);\n","import { Default } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = Default.COLLAPSE_DURATION\n) {\n  const { scrollHeight, style } = node;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration as number);\n    });\n  });\n}\n","import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport { collapseToast } from './collapseToast';\nimport { Default, SyntheticEvent } from './constant';\n\nimport { ToastTransitionProps } from '../types';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Append current toast position to the classname.\n   * If multiple classes are provided, only the last one will get the position\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when exit animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nconst enum AnimationStep {\n  Enter,\n  Exit\n}\n\n/**\n * Css animation that just work.\n * You could use animate.css for instance\n *\n *\n * ```\n * cssTransition({\n *   enter: \"animate__animated animate__bounceIn\",\n *   exit: \"animate__animated animate__bounceOut\"\n * })\n * ```\n *\n */\nexport function cssTransition({\n  enter,\n  exit,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = Default.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    nodeRef,\n    isIn\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n    const animationStep = useRef(AnimationStep.Enter);\n\n    useLayoutEffect(() => {\n      const node = nodeRef.current!;\n      const classToToken = enterClassName.split(' ');\n\n      const onEntered = (e: AnimationEvent) => {\n        if (e.target !== nodeRef.current) return;\n\n        node.dispatchEvent(new Event(SyntheticEvent.ENTRANCE_ANIMATION_END));\n        node.removeEventListener('animationend', onEntered);\n        node.removeEventListener('animationcancel', onEntered);\n        if (\n          animationStep.current === AnimationStep.Enter &&\n          e.type !== 'animationcancel'\n        ) {\n          node.classList.remove(...classToToken);\n        }\n      };\n\n      const onEnter = () => {\n        node.classList.add(...classToToken);\n        node.addEventListener('animationend', onEntered);\n        node.addEventListener('animationcancel', onEntered);\n      };\n\n      onEnter();\n    }, []);\n\n    useEffect(() => {\n      const node = nodeRef.current!;\n\n      const onExited = () => {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      };\n\n      const onExit = () => {\n        animationStep.current = AnimationStep.Exit;\n        node.className += ` ${exitClassName}`;\n        node.addEventListener('animationend', onExited);\n      };\n\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n\n    return <>{children}</>;\n  };\n}\n","import { Toast, ToastItem, ToastItemStatus } from '../types';\n\nexport function toToastItem(toast: Toast, status: ToastItemStatus): ToastItem {\n  return toast != null\n    ? {\n        content: toast.content,\n        containerId: toast.props.containerId,\n        id: toast.props.toastId,\n        theme: toast.props.theme,\n        type: toast.props.type,\n        data: toast.props.data || {},\n        isLoading: toast.props.isLoading,\n        icon: toast.props.icon,\n        status\n      }\n    : // monkey patch for now\n      ({} as ToastItem);\n}\n","import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastItem\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\n\nexport type OnChangeCallback = (toast: ToastItem) => void;\n\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit<TData>(\n    event: Event.Show,\n    content: React.ReactNode | ToastContent<TData>,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, data: ToastItem): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer: TimeoutId = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n","import React, { cloneElement, isValidElement } from 'react';\n\nimport { Theme, ToastProps, TypeOptions } from '../types';\nimport { Default, isFn, isNum, isStr } from '../utils';\n\n/**\n * Used when providing custom icon\n */\nexport interface IconProps {\n  theme: Theme;\n  type: TypeOptions;\n}\n\nexport type BuiltInIconProps = React.SVGProps<SVGSVGElement> & IconProps;\n\nconst Svg: React.FC<BuiltInIconProps> = ({ theme, type, ...rest }) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"100%\"\n    height=\"100%\"\n    fill={\n      theme === 'colored'\n        ? 'currentColor'\n        : `var(--toastify-icon-color-${type})`\n    }\n    {...rest}\n  />\n);\n\nfunction Warning(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\" />\n    </Svg>\n  );\n}\n\nfunction Info(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\" />\n    </Svg>\n  );\n}\n\nfunction Success() {\n  return (\n    <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"14\" cy=\"14\" r=\"14\" fill=\"#FFF1E7\"/>\n      <path d=\"M18.4795 10.6406L12.3195 16.8006L9.51953 14.0006\" stroke=\"#03CFA3\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>\n  );\n}\n\nfunction Error() {\n  return (\n    <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"14\" cy=\"14\" r=\"14\" fill=\"white\"/>\n      <path d=\"M17 11L11 17\" stroke=\"#F31C1C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      <path d=\"M11 11L17 17\" stroke=\"#F31C1C\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>\n  );\n}\n\nfunction Spinner() {\n  return <div className={`${Default.CSS_NAMESPACE}__spinner`} />;\n}\n\nexport const Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n\nconst maybeIcon = (type: string): type is keyof typeof Icons => type in Icons;\n\nexport function getIcon({ theme, type, isLoading, icon }: ToastProps) {\n  let Icon: React.ReactNode = null;\n  const iconProps = { theme, type };\n\n  if (icon === false) {\n    // hide\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon) || isNum(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  } else if (maybeIcon(type)) {\n    Icon = Icons[type](iconProps);\n  }\n\n  return Icon;\n}\n","import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement,\n  useState,\n  ReactElement\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isFn,\n  isNum,\n  isStr,\n  getAutoCloseDelay,\n  toToastItem\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\n\nimport { getIcon } from '../components/Icons';\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null | undefined;\n  queue: QueuedToast[];\n  count: number;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState<Id[]>([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map<Id, Toast>()).current;\n  const isToastActive = (id: Id) => toastIds.indexOf(id) !== -1;\n  const instance = useRef<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n    return () => {\n      toastToRender.clear();\n      eventManager.emit(Event.WillUnmount, instance);\n    };\n  }, []);\n\n  useEffect(() => {\n    instance.props = props;\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n  });\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit } = instance.props;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    setToastIds(state =>\n      toastId == null ? [] : state.filter(id => id !== toastId)\n    );\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } =\n      instance.queue.shift() as QueuedToast;\n    appendToast(toastContent, toastProps, staleId);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid(options: NotValidatedToastProps) {\n    return (\n      !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        options.containerId !== instance.props.containerId) ||\n      (toastToRender.has(options.toastId) && options.updateId == null)\n    );\n  }\n\n  // this function and all the function called inside needs to rely on refs\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId, data } = options;\n    const { props } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = updateId == null;\n\n    if (isNotAnUpdate) instance.count++;\n\n    const toastProps = {\n      ...props,\n      style: props.toastStyle,\n      key: instance.toastKey++,\n      ...Object.fromEntries(\n        Object.entries(options).filter(([_, v]) => v != null)\n      ),\n      toastId,\n      updateId,\n      data,\n      closeToast,\n      isIn: false,\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      autoClose: options.isLoading\n        ? false\n        : getAutoCloseDelay(options.autoClose, props.autoClose),\n      deleteToast() {\n        const removed = toToastItem(toastToRender.get(toastId)!, 'removed');\n        toastToRender.delete(toastId);\n\n        eventManager.emit(Event.Change, removed);\n\n        const queueLen = instance.queue.length;\n        instance.count =\n          toastId == null\n            ? instance.count - instance.displayedToast\n            : instance.count - 1;\n\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = toastId == null ? instance.props.limit! : 1;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    } as ToastProps;\n\n    toastProps.iconOut = getIcon(toastProps);\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton)\n        ? props.closeButton\n        : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content as ReactElement, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps, data });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      instance.count > props.limit &&\n      isNotAnUpdate\n    ) {\n      instance.queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay)) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    if (staleId) toastToRender.delete(staleId);\n\n    const toast = {\n      content,\n      props: toastProps\n    };\n    toastToRender.set(toastId, toast);\n\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n    eventManager.emit(\n      Event.Change,\n      toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated')\n    );\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toRender = new Map<ToastPosition, Toast[]>();\n    const collection = Array.from(toastToRender.values());\n\n    if (props.newestOnTop) collection.reverse();\n\n    collection.forEach(toast => {\n      const { position } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position)!.push(toast);\n    });\n\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n","import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn, Default, Direction, SyntheticEvent } from '../utils';\nimport { ToastProps } from '../types';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  delta: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n  didMove: boolean;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useRef<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    syncProps.current = props;\n  });\n\n  useEffect(() => {\n    if (toastRef.current)\n      toastRef.current.addEventListener(\n        SyntheticEvent.ENTRANCE_ANIMATION_END,\n        playToast,\n        { once: true }\n      );\n\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose))\n        props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (props.draggable) {\n      // required for ios safari to prevent default swipe behavior\n      if (e.nativeEvent.type === 'touchstart') e.nativeEvent.preventDefault();\n\n      bindDragEvents();\n      const toast = toastRef.current!;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent as DragEvent);\n      drag.y = getY(e.nativeEvent as DragEvent);\n\n      if (props.draggableDirection === Direction.X) {\n        drag.start = drag.x;\n        drag.removalDistance =\n          toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance =\n          toast.offsetHeight *\n          (props.draggablePercent === Default.DRAGGABLE_PERCENT\n            ? props.draggablePercent * 1.5\n            : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        e.nativeEvent.type !== 'touchend' &&\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e as DragEvent);\n      drag.y = getY(e as DragEvent);\n      if (props.draggableDirection === Direction.X) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      }\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = `translate${props.draggableDirection}(${drag.delta}px)`;\n      toast.style.opacity = `${\n        1 - Math.abs(drag.delta / drag.removalDistance)\n      }`;\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current!;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = `translate${props.draggableDirection}(0)`;\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n","import React, { Fragment } from 'react';\nimport { Theme, TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n  theme: Theme;\n}\n\nexport function CloseButton({\n  closeToast,\n  theme,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  console.log(closeToast, theme, ariaLabel)\n  return (\n    <Fragment></Fragment>\n  );\n}\n","import React from 'react';\nimport cx from 'clsx';\n\nimport { Default, isFn, Type } from './../utils';\nimport { TypeOptions, ToastClassName, Theme } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type?: TypeOptions;\n\n  /**\n   * The theme that is currently used\n   */\n  theme: Theme;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type = Type.DEFAULT,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn,\n  theme\n}: ProgressBarProps) {\n  const isHidden = hide || (controlledProgress && progress === 0);\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: isHidden ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${Default.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${Default.CSS_NAMESPACE}__progress-bar--animated`,\n    `${Default.CSS_NAMESPACE}__progress-bar-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  );\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n\n  // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && (progress as number)! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && (progress as number)! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-hidden={isHidden ? 'true' : 'false'}\n      aria-label=\"notification timer\"\n      className={classNames}\n      style={style}\n      {...animationEvent}\n    />\n  );\n}\n","import React, { cloneElement, isValidElement, ReactNode } from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { CloseButton } from './CloseButton';\nimport { ToastProps } from '../types';\nimport { Default, isFn } from '../utils';\nimport { useToast } from '../hooks/useToast';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const { isRunning, preventExitTransition, toastRef, eventHandlers } =\n    useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    iconOut,\n    closeOnClick,\n    theme\n  } = props;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__toast`,\n    `${Default.CSS_NAMESPACE}__toast-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__toast--rtl`]: rtl\n    },\n    {\n      [`${Default.CSS_NAMESPACE}__toast--close-on-click`]: closeOnClick\n    }\n  );\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n  const isProgressControlled = !!progress || !autoClose;\n\n  const closeButtonProps = { closeToast, type, theme };\n  let Close: React.ReactNode = null;\n\n  if (closeButton === false) {\n    // hide\n  } else if (isFn(closeButton)) {\n    Close = closeButton(closeButtonProps);\n  } else if (isValidElement(closeButton)) {\n    Close = cloneElement(closeButton, closeButtonProps);\n  } else {\n    Close = CloseButton(closeButtonProps);\n  }\n\n  return (\n    <Transition\n      isIn={isIn}\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(isIn && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${Default.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {iconOut != null && (\n            <div\n              className={cx(`${Default.CSS_NAMESPACE}__toast-icon`, {\n                [`${Default.CSS_NAMESPACE}--animate-icon ${Default.CSS_NAMESPACE}__zoom-enter`]:\n                  !isLoading\n              })}\n            >\n              {iconOut}\n            </div>\n          )}\n          <div><h5 className=\"toastify-text\">{children as ReactNode}</h5></div>\n        </div>\n        {Close}\n        <ProgressBar\n          {...(updateId && !isProgressControlled\n            ? { key: `pb-${updateId}` }\n            : {})}\n          rtl={rtl}\n          theme={theme}\n          delay={autoClose as number}\n          isRunning={isRunning}\n          isIn={isIn}\n          closeToast={closeToast}\n          hide={hideProgressBar}\n          type={type}\n          style={progressStyle}\n          className={progressClassName}\n          controlledProgress={isProgressControlled}\n          progress={progress || 0}\n        />\n      </div>\n    </Transition>\n  );\n};\n","import { Default, cssTransition } from '../utils';\n\nconst getConfig = (animationName: string, appendPosition = false) => ({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__${animationName}-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__${animationName}-exit`,\n  appendPosition\n});\n\nconst Bounce = cssTransition(getConfig('bounce', true));\n\nconst Slide = cssTransition(getConfig('slide', true));\n\nconst Zoom = cssTransition(getConfig('zoom'));\n\nconst Flip = cssTransition(getConfig('flip'));\n\nexport { Bounce, Slide, Zoom, Flip };\n","// https://github.com/yannickcr/eslint-plugin-react/issues/3140\n/* eslint react/prop-types: \"off\" */\nimport React, { forwardRef, StyleHTMLAttributes, useEffect } from 'react';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { Direction, Default, parseClassName, isFn } from '../utils';\nimport { useToastContainer } from '../hooks/useToastContainer';\nimport { ToastContainerProps, ToastPosition } from '../types';\n\nexport const ToastContainer = forwardRef<HTMLDivElement, ToastContainerProps>(\n  (props, ref) => {\n    const { getToastToRender, containerRef, isToastActive } =\n      useToastContainer(props);\n    const { className, style, rtl, containerId } = props;\n\n    function getClassName(position: ToastPosition) {\n      const defaultClassName = cx(\n        `${Default.CSS_NAMESPACE}__toast-container`,\n        `${Default.CSS_NAMESPACE}__toast-container--${position}`,\n        { [`${Default.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n      );\n      return isFn(className)\n        ? className({\n            position,\n            rtl,\n            defaultClassName\n          })\n        : cx(defaultClassName, parseClassName(className));\n    }\n\n    useEffect(() => {\n      if (ref) {\n        (ref as React.MutableRefObject<HTMLDivElement>).current =\n          containerRef.current!;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={containerRef}\n        className={Default.CSS_NAMESPACE as string}\n        id={containerId as string}\n      >\n        {getToastToRender((position, toastList) => {\n          const containerStyle: React.CSSProperties = !toastList.length\n            ? { ...style, pointerEvents: 'none' }\n            : { ...style };\n\n          return (\n            <div\n              className={getClassName(position)}\n              style={containerStyle}\n              key={`container-${position}`}\n            >\n              {toastList.map(({ content, props: toastProps }, i) => {\n                return (\n                  <Toast\n                    {...toastProps}\n                    isIn={isToastActive(toastProps.toastId)}\n                    style={\n                      {\n                        ...toastProps.style,\n                        '--nth': i + 1,\n                        '--len': toastList.length\n                      } as StyleHTMLAttributes<HTMLDivElement>\n                    }\n                    key={`toast-${toastProps.key}`}\n                  >\n                    {content}\n                  </Toast>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n\nToastContainer.displayName = 'ToastContainer';\n\nToastContainer.defaultProps = {\n  position: 'top-right',\n  transition: Bounce,\n  autoClose: 5000,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  draggable: true,\n  draggablePercent: Default.DRAGGABLE_PERCENT as number,\n  draggableDirection: Direction.X,\n  role: 'alert',\n  theme: 'light'\n};\n","import { POSITION, TYPE, isStr, isNum, isFn, Type } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  TypeOptions\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\ninterface EnqueuedToast {\n  content: ToastContent<any>;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet queue: EnqueuedToast[] = [];\nlet TOAST_ID = 1;\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = containers.get(containerId || latestInstance);\n  return container && container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return `${TOAST_ID++}`;\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  return options && (isStr(options.toastId) || isNum(options.toastId))\n    ? options.toastId\n    : generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast<TData>(\n  content: ToastContent<TData>,\n  options: NotValidatedToastProps\n): Id {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nfunction createToastByType(type: string) {\n  return <TData = unknown>(\n    content: ToastContent<TData>,\n    options?: ToastOptions\n  ) => dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast<TData = unknown>(\n  content: ToastContent<TData>,\n  options?: ToastOptions\n) {\n  return dispatchToast(content, mergeOptions(Type.DEFAULT, options));\n}\n\ntoast.loading = <TData = unknown>(\n  content: ToastContent<TData>,\n  options?: ToastOptions\n) =>\n  dispatchToast(\n    content,\n    mergeOptions(Type.DEFAULT, {\n      isLoading: true,\n      autoClose: false,\n      closeOnClick: false,\n      closeButton: false,\n      draggable: false,\n      ...options\n    })\n  );\n\nexport interface ToastPromiseParams<\n  TData = unknown,\n  TError = unknown,\n  TPending = unknown\n> {\n  pending?: string | UpdateOptions<TPending>;\n  success?: string | UpdateOptions<TData>;\n  error?: string | UpdateOptions<TError>;\n}\n\nfunction handlePromise<TData = unknown, TError = unknown, TPending = unknown>(\n  promise: Promise<TData> | (() => Promise<TData>),\n  { pending, error, success }: ToastPromiseParams<TData, TError, TPending>,\n  options?: ToastOptions\n) {\n  let id: Id;\n\n  if (pending) {\n    id = isStr(pending)\n      ? toast.loading(pending, options)\n      : toast.loading(pending.render, {\n          ...options,\n          ...(pending as ToastOptions)\n        });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null\n  };\n\n  const resolver = <T>(\n    type: TypeOptions,\n    input: string | UpdateOptions<T> | undefined,\n    result: T\n  ) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? { render: input } : input;\n\n    // if the id is set we know that it's an update\n    if (id) {\n      toast.update(id, {\n        ...baseParams,\n        ...params\n      } as UpdateOptions);\n    } else {\n      // using toast.promise without loading\n      toast(params!.render, {\n        ...baseParams,\n        ...params\n      } as ToastOptions);\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise;\n\n  //call the resolvers only when needed\n  p.then(result => resolver('success', success, result)).catch(err =>\n    resolver('error', error, err)\n  );\n\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(Type.SUCCESS);\ntoast.info = createToastByType(Type.INFO);\ntoast.error = createToastByType(Type.ERROR);\ntoast.warning = createToastByType(Type.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(Type.DEFAULT, {\n      theme: 'dark',\n      ...options\n    })\n  );\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) => {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Clear, id);\n  } else {\n    queue = queue.filter(t => id != null && t.options.toastId !== id);\n  }\n};\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = <TData = unknown>(\n  toastId: Id,\n  options: UpdateOptions<TData> = {}\n) => {\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        delay: 100,\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Subscribe to change when a toast is added, removed and updated\n *\n * Usage:\n * ```\n * const unsubscribe = toast.onChange((payload) => {\n *   switch (payload.status) {\n *   case \"added\":\n *     // new toast added\n *     break;\n *   case \"updated\":\n *     // toast updated\n *     break;\n *   case \"removed\":\n *     // toast has been removed\n *     break;\n *   }\n * })\n * ```\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  eventManager.on(Event.Change, callback);\n  return () => {\n    eventManager.off(Event.Change, callback);\n  };\n};\n\n/**\n * @deprecated\n * Will be removed in the next major release.\n */\ntoast.POSITION = POSITION;\n\n/**\n * @deprecated\n * Will be removed in the next major release.\n */\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n  });\n\nexport { toast };\n","import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT';\n\n/**\n * @deprecated\n */\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\n/**\n * @deprecated\n */\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\nexport const enum Type {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  DEFAULT = 'default'\n}\n\nexport const enum Default {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify',\n  DRAGGABLE_PERCENT = 80\n}\n\nexport const enum Direction {\n  X = 'x',\n  Y = 'y'\n}\n\nexport const enum SyntheticEvent {\n  ENTRANCE_ANIMATION_END = 'd'\n}\n"],"names":["v","isNaN","isStr","isFn","content","isValidElement","isNum","node","done","duration","scrollHeight","style","requestAnimationFrame","minHeight","height","transition","padding","margin","setTimeout","enter","exit","appendPosition","collapse","collapseDuration","children","position","preventExitTransition","nodeRef","isIn","useRef","useLayoutEffect","current","enterClassName","split","e","target","dispatchEvent","removeEventListener","onEntered","animationStep","type","classList","remove","classToToken","add","addEventListener","useEffect","onExited","collapseToast","className","exitClassName","toast","status","containerId","props","id","toastId","theme","data","isLoading","icon","list","emitQueue","on","event","callback","this","has","set","get","push","off","filter","cb","delete","cancelEmit","timers","forEach","clearTimeout","emit","timer","_ref","rest","viewBox","width","fill","info","Svg","React","d","warning","success","xmlns","cx","cy","r","stroke","error","spinner","forceUpdate","useReducer","x","toastIds","setToastIds","useState","indexOf","toastKey","displayedToast","count","queue","isToastActive","getToast","toastToRender","limit","instance","length","state","toastContent","toastProps","staleId","shift","appendToast","delay","options","canBeRendered","containerRef","enableMultiContainer","updateId","isNotValid","removeToast","isNotAnUpdate","toastStyle","key","Object","fromEntries","entries","_ref3","_","closeToast","parseClassName","toastClassName","bodyClassName","progressClassName","autoClose","toastAutoClose","containerAutoClose","deleteToast","toToastItem","eventManager","removed","queueLen","freeSlot","dequeueToast","toDequeue","i","iconOut","Icon","iconProps","cloneElement","Icons","maybeIcon","getIcon","onOpen","onClose","closeButton","buildToast","clearWaitingQueue","clear","getToastToRender","Array","from","values","newestOnTop","collection","reverse","toRender","p","targetTouches","clientX","clientY","isRunning","setIsRunning","setPreventExitTransition","start","y","delta","removalDistance","canCloseOnClick","canDrag","boundingRect","didMove","pauseOnHover","onClick","closeOnClick","draggable","nativeEvent","preventDefault","drag","document","onDragMove","onDragEnd","toastRef","getBoundingClientRect","getX","getY","draggableDirection","offsetWidth","draggablePercent","offsetHeight","top","bottom","left","right","pauseToast","playToast","transform","opacity","Math","abs","syncProps","once","pauseOnFocusLoss","hasFocus","window","onMouseDown","onDragStart","onTouchStart","onMouseUp","onDragTransitionEnd","onTouchEnd","eventHandlers","onMouseEnter","onMouseLeave","ariaLabel","console","log","Fragment","hide","userStyle","controlledProgress","progress","rtl","animationDuration","animationPlayState","isHidden","defaultClassName","role","classNames","useToast","hideProgressBar","Transition","bodyStyle","progressStyle","Close","closeButtonProps","CloseButton","cssClasses","ref","ProgressBar","isProgressControlled","animationName","cssTransition","getConfig","forwardRef","useToastContainer","toastList","pointerEvents","getClassName","containerStyle","map","Toast","ToastContainer","displayName","defaultProps","Bounce","TOAST_ID","generateToastId","containers","size","getToastId","dispatchToast","mergeOptions","loading","promise","pending","render","input","result","dismiss","resetParams","update","baseParams","params","then","resolver","catch","err","createToastByType","warn","dark","t","isActive","container","latestInstance","oldOptions","oldContent","nextOptions","onChange","POSITION","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","TYPE","INFO","SUCCESS","WARNING","ERROR","DEFAULT","containerInstance","item"],"mappings":"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"}